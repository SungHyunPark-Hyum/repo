//TRIPATHCNT

#include<iostream>
using namespace std;

int n;
int tri[100][100];
int dp[100][100];
int dp2[100][100];

int big(int x, int y)
{
	if (x > y)
		return x;
	else
		return y;
}

int find(int x, int y)
{
	if (x == n - 1)
	{
		dp[x][y] = tri[x][y];
		return tri[x][y];
	}

	int& ret = dp[x][y];
	if (ret != -1)
		return ret;
	int plus = find(x + 1, y);
	plus = big(plus, find(x + 1, y + 1));
	ret = tri[x][y] + plus;
	return ret;
}

int find2(int x, int y)
{
	if (x == n - 1)
		return 1;

	int& ret = dp2[x][y];
	if (ret != -1)
		return ret;
	int a1, a2;
	a1 = dp[x + 1][y];
	a2 = dp[x + 1][y + 1];
	if (a1 == a2)
	{
		ret = find2(x + 1, y) + find2(x + 1, y + 1);
		return ret;
	}
	else if (a1 > a2)
	{
		ret = find2(x + 1, y);
		return ret;
	}
	else
	{
		ret = find2(x + 1, y + 1);
		return ret;
	}
}

int main()
{
	int t_num;
	cin >> t_num;

	for (int u = 0; u < t_num; u++)
	{
		cin >> n;
		for (int i = 0; i < n; i++)
			for (int j = 0; j <= i; j++)
			{
				cin >> tri[i][j];
				dp[i][j] = -1;
				dp2[i][j] = -1;
			}

		dp[0][0] = find(0, 0);
		int ans = find2(0, 0);
		cout << ans << endl;
	}
}