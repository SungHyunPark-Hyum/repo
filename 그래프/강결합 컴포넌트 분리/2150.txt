//2150

#include<iostream>
#include<vector>
#include<stack>
#include<queue>
using namespace std;

int V, E;
vector<vector<int>> adj;
vector<int> discovered, sccId;
int disCount, sccCount;
stack<int> Stack;
vector<vector<int>> ans;

int min(int x, int y)
{
	if (x > y) return y;
	else return x;
}

bool operator<(pair<int, int>& p1, pair<int, int>& p2)
{
	return p1.first < p2.first;
}

int SCC(int here)
{
	int ret = discovered[here] = disCount++;
	Stack.push(here);
	for (int i = 0; i < adj[here].size(); i++)
	{
		int there = adj[here][i];
		if (discovered[there] == -1)
			ret = min(ret, SCC(there));
		else if (sccId[there] == -1)
			ret = min(ret, discovered[there]);
	}
	if (ret == discovered[here])
	{
		while (true)
		{
			int t = Stack.top();
			Stack.pop();
			sccId[t] = sccCount;
			if (t == here)
				break;
		}
		sccCount++;
	}
	return ret;
}

int main()
{
	ios_base::sync_with_stdio(0); cin.tie(0);
	cin >> V >> E;
	adj = vector<vector<int>>(V + 1);
	int x, y;
	disCount = sccCount = 0;
	discovered = sccId = vector<int>(V + 1, -1);
	for (int i = 0; i < E; i++)
	{
		cin >> x >> y;
		adj[x].push_back(y);
	}
	for (int i = 1; i <= V; i++)
		if (discovered[i] == -1)
			SCC(i);
	
	ans = vector<vector<int>>(sccCount);
	priority_queue<pair<int, int>> pq;
	for (int i = 1; i <= V; i++)
		ans[sccId[i]].push_back(i);
	for (int i = 0; i < sccCount; i++)
		pq.push(make_pair(-1 * ans[i][0], i));
	cout << sccCount << "\n";
	while (!pq.empty())
	{
		x = pq.top().second;
		pq.pop();
		for (int i = 0; i < ans[x].size(); i++)
			cout << ans[x][i] << " ";
		cout << -1 << endl;
	}
}