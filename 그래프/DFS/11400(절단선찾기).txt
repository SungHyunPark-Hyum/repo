//11400

#include<iostream>
#include<vector>
#include<queue>
using namespace std;

int V, E;
vector<vector<int>> adj;
vector<int> discovered;
priority_queue<pair<int, int>> pq;
int counter = 0;

bool operator<(pair<int, int>& p1, pair<int, int>& p2)
{
	return p1.first < p2.first;
}

int min(int x, int y)
{
	if (x > y) return y;
	else return x;
}

int dfs(int here, int before)
{
	int ret = discovered[here] = counter++;
	int temp;
	for (int i = 0; i < adj[here].size(); i++)
	{
		int there = adj[here][i];
		if (discovered[there] == -1)
		{
			temp = dfs(there, here);
			if (temp > discovered[here])
			{
				if (here < there)
					pq.push(make_pair(-1 * here, -1*there));
				else
					pq.push(make_pair(-1 * there,-1* here));
			}
			ret = min(ret, temp);
		}
		else
			if(there != before)
				ret = min(ret, discovered[there]);
	}
	return ret;
}

int main()
{
	ios_base::sync_with_stdio(0); cin.tie(0);
	cin >> V >> E;
	adj = vector<vector<int>>(V+1);
	discovered = vector<int>(V+1, -1);
	int x, y;
	for (int i = 0; i < E; i++)
	{
		cin >> x >> y;
		adj[x].push_back(y); adj[y].push_back(x);
	}

	for (int i = 1; i <= V; i++)
		if (discovered[i] == -1)
		{
			dfs(i, -1); break;
		}
	cout << pq.size() << endl;
	while (!pq.empty())
	{
		x = pq.top().first * -1; y = pq.top().second * -1;
		pq.pop();
		cout << x << " " << y << "\n";
	}
}