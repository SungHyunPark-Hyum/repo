//GALLERY

#include<iostream>
#include<vector>
using namespace std;

int V, E;
vector<vector<int>> adj;
vector<bool> secure;
vector<bool> cctv;
int ans;

int min(int x, int y)
{
	if (x > y) return y;
	else return x;
}

//1 : !secure  3: secure, !cctv  5: cctv
int dfs(int here, int before)
{
	secure[here] = true;
	int flag[3] = { 0, };
	int temp;
	for (int i = 0; i < adj[here].size(); i++)
	{
		int there = adj[here][i];
		if (there != before)
		{
			temp = dfs(there, here);
			flag[temp/2] = 1;
		}
	}
	temp = 0;
	for (int i = 0; i < 3; i++)
		if (flag[i])
			temp += i * 2 + 1;	
	
	if (before == -1 && temp == 0)
	{
		++ans; return 0;
	}
	else if (before == -1 && temp == 3)
	{
		++ans; return 0;
	}
	else if (!temp || temp == 3)
		return 1;
	else if (temp == 5 || temp == 8)
		return 3;
	else
	{
		++ans; return 5;
	}
}

int main()
{
	ios_base::sync_with_stdio(0); cin.tie(0);
	int t_num; cin >> t_num;
	for (int u = 0; u < t_num; u++)
	{
		cin >> V >> E;
		adj = vector<vector<int>>(V);
		cctv = secure = vector<bool>(V); 
		ans = 0;
		int x, y;
		for (int i = 0; i < E; i++)
		{
			cin >> x >> y;
			adj[x].push_back(y);
			adj[y].push_back(x);
		}
		for(int i = 0; i<V; i++)
			if(!secure[i])
				dfs(i, -1);
		cout << ans << endl;
	}
}