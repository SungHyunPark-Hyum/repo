//11266

#include<iostream>
#include<vector>
#include<queue>
using namespace std;

int V, E;
vector<vector<int>> adj;
vector<int> discovered;
priority_queue<int> pq;
int Plus;

int min(int x, int y)
{
	if (x > y) return y;
	else return x;
}
int dfs(int here, bool isRoot)
{
	discovered[here] = Plus++;
	int ret = discovered[here];
	int children = 0;
	int flag = 1;
	for (int i = 0; i < adj[here].size(); ++i)
	{
		int there = adj[here][i];
		if (discovered[there] == -1)
		{
			++children;
			int subtree = dfs(there, false);
			if (!isRoot && subtree >= discovered[here])
				flag = 0;
			ret = min(ret, subtree);
		}
		else
			ret = min(ret, discovered[there]);
	}
	if (!flag)
		pq.push(-1 * here);
	if (isRoot && children >= 2)
		pq.push(-1 * here);
	return ret;
}
int main()
{
	ios_base::sync_with_stdio(0); cin.tie(0);
	cin >> V >> E;
	adj = vector<vector<int>>(V+1);
	discovered = vector<int>(V+1, -1);
	int x, y;
	for (int i = 0; i < E; i++)
	{
		cin >> x >> y;
		adj[x].push_back(y);
		adj[y].push_back(x);
	}

	for (int i = 1; i <= V; i++)
		if (discovered[i] == -1)
			dfs(i, true);
	cout << pq.size() << endl;
	while (!pq.empty())
	{
		cout << pq.top()*-1 << " ";
		pq.pop();
	}
}
