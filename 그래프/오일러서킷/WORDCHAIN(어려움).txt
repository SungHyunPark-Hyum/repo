//WORDCHAIN

#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

int N;
vector<vector<int>> adj(26, vector<int>(26, 0));
vector<int> indegree, outdegree;
vector<string> graph[26][26];

void makeGraph()
{
	for (int i = 0; i < 26; i++)
		for (int j = 0; j < 26; j++)
			graph[i][j].clear();
	adj = vector<vector<int>>(26, vector<int>(26, 0));
	indegree = vector<int>(26, 0);
	outdegree = vector<int>(26, 0);
	string s; int a, b;
	for (int i = 0; i < N; i++)
	{
		cin >> s;
		a = s[0] - 'a'; b = s[s.size() - 1] - 'a';
		adj[a][b]++;
		indegree[a]++; outdegree[b]++;
		graph[a][b].push_back(s);
	}
}

bool checkEuler()
{
	int flag, flag2;
	flag = flag2 = 0;
	for (int i = 0; i < 26; i++)
		if (indegree[i] + 1 == outdegree[i])
			flag++;
		else if (indegree[i] == outdegree[i] + 1)
			flag2++;
		else if (indegree[i] > outdegree[i] || indegree[i] < outdegree[i])
			return false;

	if ((flag == 0 && flag2 == 0) || (flag == 1 && flag2 == 1))
		return true;
	else
		return false;
}

void dfs(int here, vector<int>& chain)
{
	for(int there = 0; there < 26; there++)
		if (adj[here][there])
		{
			adj[here][there]--;
			dfs(there, chain);
		}
	chain.push_back(here);
}

void Euler(vector<int>& chain)
{
	for (int i = 0; i < 26; i++)
		if (indegree[i] == outdegree[i] + 1)
		{
			dfs(i, chain); return;
		}
	for(int i = 0; i<26; i++)
		if (outdegree[i])
		{
			dfs(i, chain); return;
		}
}

string solve()
{
	if (!checkEuler())
		return "IMPOSSIBLE";

	vector<int> chain;
	Euler(chain);
	if (chain.size() != N + 1)
		return "IMPOSSIBLE";
	string ret = "";
	reverse(chain.begin(), chain.end());
	int a, b;
	for (int i = 1; i <= N; i++)
	{
		a = chain[i - 1]; b = chain[i];
		ret += graph[a][b].back();
		if(i != N)
		ret += " ";
		graph[a][b].pop_back();
	}
	return ret;
}

int main()
{
	int t_num; cin >> t_num;
	for (int u = 0; u < t_num; u++)
	{
		cin >> N;
		makeGraph();

		cout << solve() << endl;
	}
}