//JLIS

#include<iostream>
#include<limits>
using namespace std;

int a_num, b_num;
signed long long* arr1, * arr2;
int*** dp;

int big(int x, int y)
{
	if (x > y)
		return x;
	else
		return y;
}

int find(int idx1, int idx2, long long temp, int flag)
{
	signed long long third;
	int i1 = idx1, i2 = idx2;
	if (!flag)
	{
		if (temp >= arr1[idx1])
			return 0;
		third = arr1[idx1];
		i1++;
	}
	else
	{
		if (temp >= arr2[idx2])
			return 0;
		third = arr2[idx2];
		i2++;
	}
	
	int& ret = dp[idx1][idx2][flag];
	if (ret != -1)
		return ret;
	ret = 0;
	for (int i = i1; i < a_num; i++)
	{
		ret = big(ret, find(i, idx2, third, 0));
	}

	for (int i = i2; i < b_num; i++)
	{
		ret = big(ret, find(idx1, i, third, 1));
	}

	ret += 1;
	return ret;
}

int main()
{
	int t_num;
	cin >> t_num;

	for (int u = 0; u < t_num; u++)
	{
		cin >> a_num >> b_num;
		arr1 = (signed long long*)malloc(sizeof(signed long long) * a_num);
		arr2 = (signed long long*)malloc(sizeof(signed long long) * b_num);
		dp = (int***)malloc(sizeof(int**) * a_num);
		for (int i = 0; i < a_num; i++)
			dp[i] = (int**)malloc(sizeof(int*) * b_num);
		for (int i = 0; i < a_num; i++)
			for (int j = 0; j < b_num; j++)
				dp[i][j] = (int*)malloc(sizeof(int) * 2);
		for (int i = 0; i < a_num; i++)
		{
			cin >> arr1[i];
			for (int j = 0; j < b_num; j++)
				for (int k = 0; k < 2; k++)
					dp[i][j][k] = -1;
		}
		for (int i = 0; i < b_num; i++)
			cin >> arr2[i];
			
		
		int ans = 0;

		for (int i = 0; i < a_num; i++)
			ans = big(ans, find(i, 0, numeric_limits<long long>::min() , 0));

		for (int j = 0; j < b_num; j++)
			ans = big(ans, find(0, j, numeric_limits<long long>::min(), 1));

		cout << ans << endl;
	}
}
