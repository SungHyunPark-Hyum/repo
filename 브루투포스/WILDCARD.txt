//WILDCARD

#include<iostream>
#include<queue>
using namespace std;

int N;
string s;
string* arr;

int find(int a_idx, int a_start, int s_start)
{
	int size = arr[a_idx].size();
	if (a_start >= size && s_start == s.size())
		return 1;
	else if (a_start >= size)
	{
		int flag = 1;
		for(int i = s_start; i<s.size(); i++)
			if (s[i] != '*')
			{
				flag = 0; break;
			}
		if (flag)
			return 1;
		return 0;
	}
	else if (s_start == s.size())
		return 0;

	char ca = arr[a_idx][a_start];
	char cs = s[s_start];
	int ret = 0;
	if (cs == '?')
		return find(a_idx, a_start + 1, s_start + 1);
	else if (cs == '*')
	{
		for (int i = 0; i < size; i++)
			if(find(a_idx, a_start+i, s_start+1))
				return 1;
		return 0;
	}
	else if (cs == ca)
		return find(a_idx, a_start + 1, s_start + 1);
	else
		return 0;
}
int main()
{
	int t_num;
	cin >> t_num;

	for (int u = 0; u < t_num; u++)
	{
		priority_queue<string, vector<string>, greater<string>> pq;
		cin >> s;
		cin >> N;
		arr = new string[N];
		int* ans = (int*)malloc(sizeof(int) * N);
		for (int i = 0; i < N; i++)
		{
			cin >> arr[i];
			ans[i] = 0;
		}
		for (int i = 0; i < N; i++)
			ans[i] = find(i, 0, 0);

		for (int i = 0; i < N; i++)
			if (ans[i])
				pq.push(arr[i]);

		while (!pq.empty())
		{
			cout << pq.top() << endl;
			pq.pop();
		}
		
	}

}