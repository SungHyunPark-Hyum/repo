//RESTORE

#include<iostream>
using namespace std;

int N;
string s[15];
int valid[15];
int dp[15][1 << 15];
int A;

int big(int x, int y)
{
	if (x > y)
		return x;
	else
		return y;
}

void simple()
{
	for (int i = 0; i < N; i++)
	{
		if (!valid[i]) continue;
		for (int j = 0; j < N; j++)
		{
			if (!valid[j] || i == j || s[i].size() < s[j].size()) continue;

			int q = 0, w = 0;
			while (1)
			{
				if (w == s[j].size())
				{
					valid[j] = 0;
					break;
				}
				else if (q == s[i].size())
					break;

				if (s[i][q] == s[j][w])
				{
					q++; w++;
				}
				else
				{
					q++; w = 0;
				}
			}
			
		}
	}
}

int overlap(int last, int next)
{
	int q = 0, w = 0;
	string l = s[last];
	string n = s[next];
	while (1)
	{
		if (q == l.size())
			return w;

		if (l[q] == n[w])
		{
			q++; w++;
		}
		else
		{
			q++; w = 0;
		}
	}
}

int find(int last, int used)
{
	if (used == (1 << N) - 1)
		return 0;

	int& ret = dp[last][used];
	if (ret != -1)
		return ret;
	ret = 0;
	for(int next = 0; next<N; next++)
		if (valid[next] && (used & (1<<next)) == 0)
		{
			ret = big(ret, find(next, used + (1 << next)) + overlap(last, next));
		}
	return ret;
}

int main()
{
	int t_num;
	cin >> t_num;
	for (int u = 0; u < t_num; u++)
	{
		cin >> N;
		A = 0;
		for (int i = 0; i < N; i++)
		{
			cin >> s[i];
			valid[i] = 1;
			for (int j = 0; j < 1 << 15; j++)
				dp[i][j] = -1;
		}
		simple();

		for (int i = 0; i < N; i++)
			if (valid[i])
				A += s[i].size();

		int minus = 0;
		for (int i = 0; i < N; i++)
			if (valid[i])
				minus = big(minus, find(i, 1 << i));
	}
}